{
  "hash": "faaf1393c02efc470c44d9743d6bef89",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Why Virtual Environments Matter in Machine Learning Projects\"\nauthor: \"Sandeep N\"\ndate: 2025-05-29\ncategories: [virtual-environments, python, Data Science, Machine Learning]\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    theme: cosmo\n    code-tools: false\n    code-link: true\n    code-fold: true\n    thebe: true\njupyter: python3\n---\n\n[![Tweet](https://img.shields.io/badge/Tweet-Share_on_Twitter-1DA1F2?logo=twitter)](https://twitter.com/intent/tweet?text=Check%20out%20this%20post!&url=https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)\n[![LinkedIn](https://img.shields.io/badge/Share-LinkedIn-blue?logo=linkedin)](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)\n[![Email](https://img.shields.io/badge/Email-Share_via_Email-red?logo=gmail)](mailto:?subject=Interesting%20Post&body=Check%20out%20this%20blog%20post%3A%20https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)\n[![WhatsApp](https://img.shields.io/badge/WhatsApp-Share-25D366?logo=whatsapp&logoColor=white)](https://api.whatsapp.com/send?text=Check%20out%20this%20blog%20post%3A%20https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)\n[![Reddit](https://img.shields.io/badge/Reddit-Share-orange?logo=reddit)](https://www.reddit.com/submit?url=https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html&title=Virtual%20Environments)\n\n## Introduction\n\nMany beginners (including me 🤘🏽🤦🏽‍♂️) in data science and machine learning often rush into building models without laying the foundation for a clean, maintainable, and scalable workflow. In this post, I’ll walk you through why setting up a virtual environment and organizing your ML project files isn’t just helpful it’s essential.\n\nWhether you're a beginner or not, these practices will keep your projects healthy as they grow.\n\n![**Source: ChatGPT**](images/Venvs.png){**Source: ChatGPT**, height=500px, width= 1000px}\n\n## Learning the Hard Way\n\nI didn’t come from a traditional programming background. I didn’t learn about virtual environments or project organization in a classroom or bootcamp. For the longest time, I was just running pip install in the global Python environment and saving my files wherever they felt convenient.\n\nAnd guess what? Everything seemed fine… until it wasn’t.\n\nWhen I was working on a real-world machine learning project for a client, I had to:\n\n- Use specific versions of packages (example: pandas and scikit-learn)\n- Debug code that worked on my machine but failed on the client’s server.\n- Share my work with another data scientist who couldn’t run any of my code.\n\nIt was chaotic.\n\nI was neck-deep in bugs, broken dependencies, and messy file structures. And there was no turning back, I had to fix it all in a short time.\n\nThat’s when I discovered virtual environments and structured project setups, not from a course, but from necessity. It wasn’t theory. It was survival.\n\n::: {.callout-warning title=\"Important\"}\nSet up a virtual environment and organize your folders even if you're just experimenting. it doesn’t seem urgent, until it is.\n:::\n\n## Why This Matters\n**1. Dependency Isolation**  \nHave you ever installed a library for one project, only to find that it breaks another one? That’s dependency hell.\nVirtual environments let you isolate dependencies for each project, so you can use different versions of the same library in different projects without conflicts.\n\n**2. Reproducibility**  \nImagine trying to run a project six months later and nothing works. Why? Because the environment changed.\nVirtual environments + a requirements.txt file = perfect reproducibility.\n\n**3. Cleaner Code and Collaboration**  \nStructured code is easier to debug, scale, or share with teammates.\n\n## Setting Up a Project the Right Way\n\nWhen starting a new project, it’s good practice to keep all your files organized in their own folder. Here’s how you can create a folder and move into it using your computer’s command line interface.\n\n### 1: Open your terminal or command prompt\n\n- On Windows, search for Command Prompt or PowerShell and open it.\n- On macOS, open the Terminal app.\n- On Linux, open your terminal application.\n\n### 2. Create a project folder\n```{.bash}\nmkdir ml_project\ncd ml_project\n```\n- **mkdir ml_project**\nCreates a new directory (folder) named ml_project in your current location.\nmkdir stands for make directory.\n\n- **cd ml_project**\nChanges your current working directory to the newly created ml_project folder.\ncd stands for change directory.\n\n### 3. Create and Activate a Virtual Environment\n```{.bash}\npython3.12 -m venv venv\n```\n::: {.callout-note title=\"Note\"}\nNote: Running **python3.12 -m venv venv** does not install Python 3.12, it simply uses that version (if already installed) to create the virtual environment. You’ll need to install Python 3.12 manually on your system before using this command.\n:::\n\nLet's break down what each part means:\n\npython3.12: This specifies the Python interpreter you want to use for creating the virtual environment. In this case, it's explicitly telling your system to use Python version 3.12. If you just used python or python3, it would use your default Python installation.\n\n-m: This flag stands for \"module.\" It tells the Python interpreter to run a specified module as a script.\n\nvenv: This is the name of the module that Python provides for creating virtual environments.\n\nvenv (the second one): This is the name you are giving to your new virtual environment directory. a new directory named venv will be created in your current working directory. This directory will contain a copy of the Python interpreter, pip, and other necessary files for your isolated environment.\n\nthe command **python3.12 -m venv venv** does the following:\n\n- It uses the Python 3.12 interpreter.\n- It runs the venv module.\n- It creates a new directory named venv (the second venv in the command) in the current location. - This directory will house your isolated Python environment.\n\nAfter creating a Venv, you would typically activate the virtual environment\n```{.bash}\nsource venv/bin/activate  # macOS/Linux\n#venv\\Scripts\\activate     # Windows\n```\n\n::: {.callout-note title=\"Note\"}\nTo verify if a Python virtual environment (venv) is activated, check if your terminal prompt is prefixed with the environment's name (e.g., (venv)). make sure that it is activated before installing any packages.\n:::\n\n### 4: Install Essential Packages\n```{.bash}\n#Single package at a time\npip install numpy\n\n# Multiple packages at once\npip install pandas matplotlib scikit-learn\n```\npip: This stands for \"Pip Installs Packages.\" It is the standard package installer for Python. \n\n- pip manages Python packages that aren’t part of the standard library.\n- You should use pip whenever you need external Python packages for your projects.\n- You can install and uninstall packages with pip.\n- You use requirements files to manage projects’ dependencies.\n\n::: {.callout-caution title=\"Caution\"}\nTo install multiple Python packages like numpy, pandas, matplotlib, and scikit-learn, you simply list them separated by spaces, **no commas needed**. pip install pandas matplotlib scikit-learn\n:::\n\n### 5: Freeze Your Environment\n\nOnce you've installed all the necessary libraries and your application is working as expected, freezing the environment creates a snapshot of those dependencies. This is like a \"checkpoint\" for your project's environment.\n\n```{.bash}\npip freeze > requirements.txt\n```\nEvery time you add a new package with pip install or remove one with pip uninstall, it's a good practice to update your requirements.txt file to reflect the current state of your virtual environment.\n\n::: {.callout-note title=\"Note\"}\nFor robust project setups, use Poetry instead of pip as it offers integrated dependency management and automatic lock files (poetry.lock). [Poetry](https://python-poetry.org/docs/)\n:::\n\n### 6. To replicate the environment later by you or others\n\n```{.bash}\npip install -r requirements.txt\n```\n\nThis command automates the process of setting up a project's Python dependencies. Instead of manually running pip install for each package, you can just run this one command, and pip will install everything your project needs, often with the precise versions required for compatibility. This is crucial for reproducible development environments.\n\n## Conclusion\n\nUsing a venv isn't just a good practice it's essential. It keeps your project dependencies isolated, prevents \"dependency hell\", and ensures your code behaves consistently across machines. I've learned this the hard way as someone who didn’t come from a programming background, it wasn’t until I hit painful roadblocks in a real-world client project that I realized the value of proper environment management.\n\nWhile model accuracy often takes the spotlight, it’s only one part of the bigger picture. Reproducibility, collaboration, and maintainability are just as important especially when your work moves from personal projects to production or team settings.\n\n\n## What’s Next: Getting Started with Git & GitHub\n\nNow that we’ve seen how important it is to structure your ML projects and isolate your environments, the next natural step is version control — and that’s where Git and GitHub come in.\n\nIn my next blog post, I’ll talk about:\n\n- What Git actually is and why it's essential\n- Setting up a GitHub repository for your project\n\n## Resources\n- [Python Packaging User Guide — virtualenv tutorial](https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-virtual-environments)\n\n- [Real Python - Python Virtual Environments](https://realpython.com/python-virtual-environments-a-primer/)\n\n### Connect with Me\n\n- [![GitHub](https://img.shields.io/badge/GitHub-@SandeepNarasimhan-black?logo=github)](https://github.com/SandeepNarasimhan)  \n- [![LinkedIn](https://img.shields.io/badge/LinkedIn-Sandeep%20Narasimhan-blue?logo=linkedin)](https://www.linkedin.com/in/sandeep-narasimhan-45769295)  \n- [![Email](https://img.shields.io/badge/Email-sandeepsanpande@gmail.com-red?logo=gmail)](mailto:sandeepsanpande@gmail.com)\n\n::: {.callout-caution title=\"Desclaimer\"}\nI use AI tools to assist in writing and drafting some of the content on this blog. but all content is reviewed and edited by me for accuracy and clarity.\n:::\n\n## 💬 Comments\n\n<div id=\"utterances-thread\"></div>\n<script src=\"https://utteranc.es/client.js\"\n        repo=\"SandeepNarasimhan/Neural-Notes\"\n        issue-term=\"pathname\"\n        label=\"💬 comment\"\n        theme=\"github-light\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n\n",
    "supporting": [
      "Venvs_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}