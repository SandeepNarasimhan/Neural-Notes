---
title: "Version Control Made Easy: Introduction to Git and GitHub"
author: "Sandeep N"
date: 2025-05-30
categories: [Version Control, python, Git, Github]
jupyter: python3
---

[![Tweet](https://img.shields.io/badge/Tweet-Share_on_Twitter-1DA1F2?logo=twitter)](https://twitter.com/intent/tweet?text=Check%20out%20this%20post!&url=https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)
[![LinkedIn](https://img.shields.io/badge/Share-LinkedIn-blue?logo=linkedin)](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)
[![Email](https://img.shields.io/badge/Email-Share_via_Email-red?logo=gmail)](mailto:?subject=Interesting%20Post&body=Check%20out%20this%20blog%20post%3A%20https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)
[![WhatsApp](https://img.shields.io/badge/WhatsApp-Share-25D366?logo=whatsapp&logoColor=white)](https://api.whatsapp.com/send?text=Check%20out%20this%20blog%20post%3A%20https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html)
[![Reddit](https://img.shields.io/badge/Reddit-Share-orange?logo=reddit)](https://www.reddit.com/submit?url=https%3A%2F%2Fsandeepnarasimhan.github.io%2FNeural-Notes%2Fposts%2FVenvs.html&title=Virtual%20Environments)


::: {.callout-warning icon="üõ†Ô∏è" .bg-yellow-100 .border-yellow-500 .text-yellow-800}
**üöß Work in Progress!**  
**Hey! I‚Äôm still working on this post. If you‚Äôre interested, keep an eye out for updates here ‚Äî exciting stuff coming soon!!**
:::

Add a .gitkeep or empty .txt file inside each folder so Git can track them even if they‚Äôre empty initially:

```{.bash}
touch project_name/{data,notebooks,src,models,outputs,tests}/.gitkeep
```

You start with a file called script.py. Then it becomes script_final.py. Then script_final2.py. Eventually, you‚Äôre looking at script_final_final_really_final.py.

It gets messy fast.

A system that can remember what changed, when, why and by whom ‚Äî without relying on awkward filenames or endless copies. That‚Äôs exactly where Version Control Systems (VCS) come in.

![git](images/git.png){**Source: Google Gemini**, height=500px, width= 1000px }

## Version Control System (VCS)

helps developers track changes in source code over time. It allows you to:

- Revert to previous versions of code
- Compare changes made over time
- Identify who modified a file and when
- Collaborate with multiple contributors without overwriting each other's work
- Experiment in branches without affecting the main codebase

Think of it as a magical time machine for your code. You can move back and forth between versions, experiment freely, and maintain a clear record of all changes.

### There are two major types of VCS:

1. Centralized Version Control Systems (CVCS)
2. Distributed Version Control Systems (DVCS)

In this blog, I‚Äôm going to focus on DVCS specifically, on Git.

::: {.callout-note title="Note"}
Git is the most widely used Version Control System today. It‚Äôs trusted by individual developers, open source communities, and large enterprises alike making it an essential tool in modern software development.
:::

## What is Git?

Git is the most popular Distributed Version Control System (DVCS) used by developers across the world. It was created in 2005 by Linus Torvalds, the creator of the Linux kernel, to manage the Linux source code more efficiently.

Unlike centralized systems, Git allows every user to have their own full copy of the repository, including its entire history.

## Git Terminology
high-level overview of Git‚Äôs core concepts:

- Repository (repo): A directory that contains your project files and a .git folder, which tracks all changes.
- Commit: A snapshot of your files at a certain point in time. Each commit has a unique ID and message describing the change.
- Branch: A separate line of development. The default branch is usually called main or master.
- Merge: Integrates changes from one branch into another.
- Clone: Copy an entire repository from a remote server to your local machine.
- Push / Pull: Push sends your local commits to a remote repository (like GitHub). Pull fetches and integrates changes from remote to local.

## Git follows a three-stage architecture:
1. Working Tree ‚Äì Where you make changes.
2. Staging Area (Index) ‚Äì Where you prepare changes for the next commit.
3. Repository (.git folder) ‚Äì Where committed changes are stored permanently.

## Why Use Git?
- Speed: Most operations are local and incredibly fast.
- Data Integrity: history of every change is securely stored
- Branching and Merging: Branches are lightweight and encourage experimentation.
- Widespread Adoption: Git is used in open source and enterprise environments alike. Learning Git is an essential skill for any developer or data scientist.

## Download and Install
To start using Git, you‚Äôll need to install it on your machine. Here are the official resources:

[Download Git](https://git-scm.com/downloads)  
[Installation Guide](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)

Once installed, you can open a terminal (or Git Bash on Windows) and run:
```{.bash}
git --version
```
If it returns a version number without any error, Git is ready to use!

